{"version":3,"sources":["../src/updater.js"],"names":[],"mappings":"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","file":"updater.js","sourcesContent":["import _ from \"lodash\";\nimport axios from \"axios\";\nimport semver from \"semver\";\nimport defaultOptions from \"./default-options\";\nimport UpdateIssue from \"./update-issue\";\n\nexport default class Updater {\n  constructor(options) {\n    options = _.defaults(options, defaultOptions);\n    this.updateIssue = new UpdateIssue(options);\n    this.schemaListURL = options.schemaListURL;\n    this.ruleSearchURL = options.ruleSearchURL;\n    this.ignoreList = new Set(options.ignoreList || []);\n  }\n\n  execute() {\n    return Promise.all([\n      this.getSchemaList(),\n      this.getNewVersions(),\n    ])\n    .then(([schemaList, newVersions]) => this.findUpdates(schemaList, newVersions))\n    .then((updates) => {\n      this.showUpdates(updates);\n      return this.createIssues(updates);\n    });\n  }\n\n  getSchemaList() {\n    return axios.get(this.schemaListURL).then(res => res.data);\n  }\n\n  getNewVersions() {\n    return axios.get(this.ruleSearchURL).then(res =>\n      _.transform(res.data.results, (acc, result) => {\n        acc[result.name[0]] = result.version[0];\n      }, {})\n    );\n  }\n\n  findUpdates(schemaList, newVersions) {\n    return _.flatMap(newVersions, (newVersion, name) => {\n      // Skip ignored\n      if (this.ignoreList.has(name)) return [];\n\n      if (schemaList[name]) {\n        // Updated if minor version is changed\n        const oldVersion = schemaList[name].version;\n        const stay = semver.satisfies(newVersion, `~${oldVersion}`);\n        return stay ? [] : [{ name, newVersion, oldVersion }]\n      } else {\n        // New rule\n        return [{ name, newVersion, oldVersion: null }];\n      }\n    });\n  }\n\n  showUpdates(updates) {\n    if (updates.length === 0) {\n      console.info(\"No updates found\");\n    } else {\n      console.info(`Found ${updates.length} updates`);\n      updates.forEach(({ name, newVersion, oldVersion }) => {\n        console.info(`  * ${name}: ${oldVersion || \"(none)\"} => ${newVersion}`);\n      });\n    }\n  }\n\n  createIssues(updates) {\n    if (updates.length === 0) return Promise.resolve();\n\n    console.info(`Creating ${updates.length} issues`);\n    return new Promise((resolve, reject) => {\n      const queue = _.clone(updates);\n      const next = () => {\n        const update = queue.shift();\n        if (update) {\n          console.info(`Creating a issue for ${update.name}`);\n          this.updateIssue.createOrUpdate(update)\n          .then(issue => {\n            console.info(`  Success => ${issue.url}`);\n            setImmediate(next);\n          })\n          .catch(reject);\n        } else {\n          resolve();\n        }\n      };\n      next();\n    });\n  }\n}\n"]}